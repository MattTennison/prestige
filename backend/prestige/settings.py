"""
Django settings for prestige project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

_missing_env_vars = {
	"PRESTIGE_SECRET_KEY",
	"PRESTIGE_CORS_ORIGINS",
} - os.environ.keys()

if _missing_env_vars:
	raise ValueError("Missing required env vars: %r" % _missing_env_vars)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("PRESTIGE_SECRET_KEY")
if not SECRET_KEY:
	raise ValueError("Missing secret key. Please set the env variable PRESTIGE_SECRET_KEY.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("PRESTIGE_ENV", "production") != "production"

ALLOWED_HOSTS = [
	"localhost",
	"127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'corsheaders',
	'oauth2_provider',
	'proxy',
	'auth_api',
	'storage',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	"prestige.middlewares.parsed_body.ParsedBodyMiddleware",
]

AUTH_USER_MODEL = "auth_api.User"

ROOT_URLCONF = 'prestige.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'prestige.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': BASE_DIR / 'db.sqlite3',
	}
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
]

# https://docs.djangoproject.com/en/3.1/topics/logging/
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
			'style': '{',
		},
		'simple': {
			'format': '{levelname} {message}',
			'style': '{',
		},
	},
	'filters': {
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'filters': ['require_debug_true'],
			'class': 'logging.StreamHandler',
			'formatter': 'verbose',
		},
		'mail_admins': {
			'level': 'ERROR',
			'class': 'django.utils.log.AdminEmailHandler',
		},
	},
	'loggers': {
		'django': {
			'handlers': ['console'],
			'propagate': True,
		},
		'django.request': {
			'handlers': ['console', 'mail_admins'],
			'level': 'ERROR',
			'propagate': False,
		},
		'prestige': {
			'handlers': ['console', 'mail_admins'],
			'level': 'DEBUG',
		}
	}
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

CORS_ALLOWED_ORIGINS = [s.strip() for s in os.getenv("PRESTIGE_CORS_ORIGINS", "").split(",")]
CORS_ALLOW_CREDENTIALS = True
